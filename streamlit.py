import openai
import llama_index
import importlib


# from unstructured.partition.auto import partition
from llama_index import download_loader, GPTVectorStoreIndex, ServiceContext, SimpleDirectoryReader, StorageContext, load_index_from_storage
from pathlib import Path
from dotenv import load_dotenv
from langchain import OpenAI
import streamlit as st

import os

load_dotenv()

def can_import(module_name):
    try:
        importlib.import_module(module_name)
        return True
    except ImportError:
        return False
#bring in the stored index as context

def execution_agent(objective: str, task: str) -> str:
    """
    Executes a task based on the given objective and previous context.

    Args:
        objective (str): The objective or goal for the AI to perform the task.
        task (str): The task to be executed by the AI.

    Returns:
        str: The response generated by the AI for the given task.

    """
    
    context = context_agent(query=objective, top_results_num=5)
    # print("\n*******RELEVANT CONTEXT******\n")
    # print(context)
    prompt = f"""
    You are an AI who performs one task based on the following objective: {objective}\n.
    Take into account these previously completed tasks: {context}\n.
    Your task: {task} and include the url links you used for any research.\nResponse:"""
    return openai_call(prompt, max_tokens=2000)


# Get the top n completed tasks for the objective
def context_agent(query: str, top_results_num: int):
    """
    Retrieves context for a given query from an index of tasks.

    Args:
        query (str): The query or objective for retrieving context.
        top_results_num (int): The number of top results to retrieve.

    Returns:
        list: A list of tasks as context for the given query, sorted by relevance.

    """
    results = results_storage.query(query=query, top_results_num=top_results_num)
    # print("***** RESULTS *****")
    # print(results)
    return results

def query(input_text):
    location = "ira.pdf_index"
    storage_context = StorageContext.from_defaults(persist_dir=location)

    PINECONE_API_KEY = os.getenv("PINECONE_API_KEY", "")
    if PINECONE_API_KEY:
        if can_import("extensions.pinecone_storage"):
            PINECONE_ENVIRONMENT = os.getenv("PINECONE_ENVIRONMENT", "")
            assert (
                PINECONE_ENVIRONMENT
            ), "\033[91m\033[1m" + "PINECONE_ENVIRONMENT environment variable is missing from .env" + "\033[0m\033[0m"
            from extensions.pinecone_storage import PineconeResultsStorage
            results_storage = PineconeResultsStorage(OPENAI_API_KEY, PINECONE_API_KEY, PINECONE_ENVIRONMENT, LLM_MODEL, LLAMA_MODEL_PATH, RESULTS_STORE_NAME, OBJECTIVE)
            print("\nReplacing results storage: " + "\033[93m\033[1m" +  "Pinecone" + "\033[0m\033[0m")


    #TODO what is this stuff? Pinecone, Weaviate, Chroma, Qdrant, 

    #query it
    index = load_index_from_storage(storage_context)

    query_engine = index.as_query_engine()
    response = query_engine.query(input_text)

        # "Write me a table of contents for this bill. With a brief one sentence summary of each section.")
    # print(response)
    with Message(label="Answer") as m:
        m.write("### Response")
        m.write(response)

    #TODO fix token limit

class Message:
    # ai_icon = "./img/robot.png"

    def __init__(self, label: str, expanded: bool = True):
        self.label = label
        self.expanded = expanded

    def __enter__(self):
        message_area, icon_area = st.columns([10, 1])
        # icon_area.image(self.ai_icon, caption="QuizMeGPT")

        self.expander = message_area.expander(label=self.label, expanded=self.expanded)

        return self

    def __exit__(self, ex_type, ex_value, trace):
        pass

    def write(self, content):
        self.expander.markdown(content)

#TODO chatbot feature https://gpt-index.readthedocs.io/en/latest/guides/tutorials/building_a_chatbot.html

if __name__ == "__main__":
    st.set_page_config(
        initial_sidebar_state="expanded",
        page_title="I'm Just a Bill",
        layout="centered",
    )

    with st.sidebar:
        openai_api_key = st.text_input('Your OpenAI API KEY', type="password")

    st.title("WTF does this bill mean for me")
    text = st.text_area("What's your question?", height=300)
    if text:
        query(text)
